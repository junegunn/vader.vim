Execute (Initialize vars):
  let g:abc   = 1
  let g:def   = 2
  let g:xyz   = 3
  let g:dict  = {'a': {'b': 'c'}}
  let $ENVVAR = 4

Execute (Save vars - comma-separated list of optionally-quoted names):
  Save g:abc, 'g:def', "g:xyz", $ENVVAR, &number, g:dict
  Save g:undefined
  Save $PREVIOUSLY_UNDEFINED

Execute (Save/Restore vars by value):
  let g:dict.a.b = 'x'
  Restore g:dict
  Assert g:dict == {'a': {'b': 'c'}}, 'Save returns a copy'

  let g:dict.a.b = 'x'
  Restore g:dict
  Assert g:dict == {'a': {'b': 'c'}}, 'First Restore returns a copy'

Execute (Set previously undefined vars):
  let g:undefined = 1
  let $PREVIOUSLY_UNDEFINED = 1

Execute (Unlet vars):
  unlet g:abc
  unlet g:def
  unlet g:xyz
  let $ENVVAR = ''
  set number!

Execute (Restore g:abc and g:def - names can be optionally quoted):
  Restore 'g:abc', g:def

Execute (Check g:abc and g:def):
  AssertEqual 1, g:abc
  AssertEqual 2, g:def

Execute (g:xyz and $ENVVAR should not exist):
  Assert !exists('g:xyz'), 'g:xyz should not exist'
  Assert empty($ENVVAR), '$ENVVAR should be empty'

Execute (Restore everything):
  let number = &number
  Restore
  AssertEqual 3, g:xyz
  AssertEqual '4', $ENVVAR
  AssertEqual !number, &number

Execute (g:undefined should not exist):
  Assert !exists('g:undefined')
  AssertEqual $PREVIOUSLY_UNDEFINED, ''

Execute (Restore everthing again):
  let g:xyz = 5
  Restore
  AssertEqual 3, g:xyz

Execute (Cleanup):
  unlet g:abc
  unlet g:def
  unlet g:xyz
  unlet number
